Learning Go
Through Illustrations

Trevor Forrey
http://trevorforrey.com
@tforrey

* Go What?
.image ./imgs/gopher.png _ 300

Developed at Google in 2009

What makes it so great?
- Opinionated
- Dependencies built-in binaries
- Concurrency Primitives

* Go Where?

.image ./imgs/docker-logo.png _ 150
.image ./imgs/kubernetes.svg _ 150
.image ./imgs/mozilla.png _ 150
.image ./imgs/twitch.png _ 150

* Background - Single Threaded vs. Multi Threaded
- Single Threaded: One function after another
- Multi-Threaded: independent functions share resources

.image ./imgs/WorkingGopher.jpg _ 500

* One Gopher Architecture
.image ./imgs/single_arch.jpg _ 950

* One Gopher Code
.play ./exec/singleThreaded.go /^func main/,/^}/

* Multi Gophered Architecture
.image ./imgs/independent_arch.jpg _ 950

* Tools We'll Need
- A way to create Gophers
- A way to communicate between Gophers

* Go Routines
.image ./imgs/eggsGopher.jpg _ 950

* Two Gophers, One Mine
.play ./exec/twoFinders.go /^func main/,/^}/

* What if we want to be sneaky? (Anonymous Go Routines)
.image ./imgs/bigAnonGopher.jpg _ 700
.code ./examples/anonymous.go /^func main/,/^}/

* Current Status
- Start up go routines easily
- Even more lightweight that a normal 'thread'
- But How will we communicate between gophers?

* Channels
.image ./imgs/gopher_cans.jpg _ 900

* Channel Creation
.image ./imgs/channel.jpg _ 900
.code ./examples/firstChannel.go /^func main/,/^}/


* Sending / Receiving on Channels
.image ./imgs/channek_send.jpg _ 900
.code ./examples/firstChannelSend.go /^func main/,/^}/

* Example of sending / receiving on a channel
.play ./exec/exampleSendReceive.go /^func main/,/^}/


* Channel Blocking
- Allows go routines to 'sync' back up

* Blocking on a Send
.image ./imgs/blockOnSend.jpg _ 900
.play ./exec/blockOnSend.go /^func main/,/^}/


* Blocking on a Receive
.image ./imgs/blockonRec.jpg _ 900
.play ./exec/blockOnReceive.go /^func main/,/^}/


* Unbuffered Channels
.image ./imgs/bigoneChannel.jpg _ 900
.code ./examples/firstChannel.go /^func main/,/^}/


* Buffered Channels
.image ./imgs/bigmultiChannel.jpg _ 900
.code ./examples/bufferedChannel.go /^func main/,/^}/

* Buffered Channels cont
.image ./imgs/channel_sends.jpg _ 900
Now we don't block on every channel write/read!

* Buffered Channels Example
.play ./exec/bufferedChannelsExample.go /^func main/,/^}/

* Current Status
- Create Go Routines (Gophers)
- Create Channels
- You are all Masters of Concurrency!

* Desired Pipeline
.image ./imgs/independent_arch.jpg _ 950

* Final Pipeline
.play ./exec/finalPipeline.go /^func main/,/^}/

* But what if I need to have more gophers (for speed of course)?!
Let's get fancy....by passing and returning channels
.image ./imgs/AsynchMultWorkers.svg _ 500

* Passing in / returning a channel
.code ./examples/generatorStructure.go /^func gen/,/^}/

* Passing in / returning a channel
.code ./exec/passInAndReturnChannel.go /^func gen/,/^}/

* Passing in / returning a channel contd
.code ./exec/passInAndReturnChannel.go /^func finder/,/^}/

* Passing in / returning a channel example
.play ./exec/passInAndReturnChannel.go /^func main/,/^}/

* Full Program
.play ./exec/allTogether.go /^func main/,/^}/

* What's the Point though?
If we can pass in and return channels, we can share channels between multiple
Go routines (Gophers).
- Concurrency Pattern: Fan In / Fan Out

* Fan Out
.image ./imgs/fanOut.jpg _ 700

* Fan In
.image ./imgs/fanIn.jpg _ 900

* Now we can do stuff like this
.image ./imgs/AsynchMultWorkers.svg _ 500

* Before You Go...
You should know!

* Main Function is a Go Routine
.image ./imgs/mainGopher.jpg _ 900
.play ./exec/mainGopherExample.go /^func main/,/^}/

* Better ways than time out
.image ./imgs/imdonegopher.jpg _ 700
.play ./exec/imdone.go /^func main/,/^}/

* Non-blocking reads
.play ./exec/nonblockingRead.go /^func main/,/^}/

* Non-blocking writes
.play ./exec/nonblockingWrite.go /^func main/,/^}/

* Where to learn next
.image ./imgs/ReadingGopher.jpg _ 600
.link https://gobyexample.com/ Go by Example
.link https://www.youtube.com/watch?v=cN_DpYBzKso Rob Pike - 'Concurrency Is Not Parallelism'
.link https://www.youtube.com/watch?v=f6kdp27TYZs&t=938s Google I/O 2012 — Go Concurrency Patterns
